---
- name: Prepare pve node
  hosts: postgresql
  gather_facts: true
  any_errors_fatal: true
  tasks:
    - name: Ensure packages are updated
      become: true
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes

    - name: Ensure postgres packages are installed
      become: true
      ansible.builtin.apt:
        name:
          - postgresql
          - postgresql-client
          - acl # required for become_user
          - python3-psycopg2 # required for postgres roles
        state: present
      register: install_postgres_res

    - name: Upload postgres conf
      become: true
      ansible.builtin.template:
        src: templates/pg_conf.j2
        dest: /etc/postgresql/15/main/conf.d/00-ansible.conf
        owner: "{{ default_user.name }}"
        group: "{{ default_user.name }}"
        mode: '0640'
      when: install_postgres_res.changed
     
    - name: Set linux user password
      become: true
      ansible.builtin.user:
        name: "{{ default_user.name }}"
        password: "{{ default_user.password | password_hash('sha512') }}"
        expires: -1
      when: install_postgres_res.changed

    - name: Restart postgresql before trying to set user password
      become: true
      ansible.builtin.service:
        name: postgresql
        state: restarted
      
    - name: Set default user password
      become: true
      vars:
        ansible_become_user: "{{ default_user.name }}"
      ansible.builtin.shell:
        cmd: psql -c "ALTER USER {{ default_user.name }} WITH PASSWORD '{{ default_user.password }}';"

    - name: Ensure connection is allowed for user/db
      become: true
      ansible.builtin.lineinfile:
        path: /etc/postgresql/15/main/pg_hba.conf
        line: "host    {{ item.db }}      {{ item.user }}      {{ item.addr }}          scram-sha-256"
      loop: "{{ allow_conns }}"

    - name: Restart postgresql to make sure connection allowed is applied
      become: true
      ansible.builtin.service:
        name: postgresql
        state: restarted
      
    - name: Create DBs
      community.postgresql.postgresql_db:
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ default_user.name }}"
        login_password: "{{ default_user.password }}"
        port: "{{ postgres_port }}"
        name: "{{ item }}"
        encoding: UTF-8
        template: template0
      loop: "{{ create_dbs }}"
      
    - name: Create users
      community.postgresql.postgresql_user:
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ default_user.name }}"
        login_password: "{{ default_user.password }}"
        port: "{{ postgres_port }}"
        name: "{{ item.name }}"
        password: "{{ item.password }}"
      environment:
        PGOPTIONS: "-c password_encryption=scram-sha-256"
      loop: "{{ create_users }}"
      
    - name: Grant DB privileges
      community.postgresql.postgresql_privs:
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ default_user.name }}"
        login_password: "{{ default_user.password }}"
        port: "{{ postgres_port }}"
        db: postgres
        type: database
        obj: "{{ item.db }}"
        privs: "{{ item.privs }}"
        role: "{{ item.user }}"
      loop: "{{ grant_db_privs }}"
