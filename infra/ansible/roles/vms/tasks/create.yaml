---
- name: Create template from cloud-init image
  community.general.proxmox_kvm:
    api_host: "{{ pve.api.host }}"
    api_user: "{{ pve.api.user }}"
    api_password: "{{ pve.api.password }}"
    node: "{{ pve.node }}"
    name: "{{ template.name }}"
    vmid: "{{ template.vmid }}"
    tags:
      - ansible
      - template
    bios: ovmf
    boot: 'order=scsi0'
    cores: 2
    sockets: 1
    machine: q35
    memory: 4096
    agent: 1
    autostart: true
    ostype: "{{ template.os_type }}"
    efidisk0:
      storage: "{{ template.storage }}"
      format: raw
      efitype: 4m
      pre_enrolled_keys: 0 # disable secureboot
    serial:
      serial0: 'socket'
    vga: serial0
    scsihw: 'virtio-scsi-single'
    scsi:
      scsi0: "{{ template.storage }}:0,iothread=1,discard=on,import-from={{ template.download.path }}/{{ template.file.name }}"
      scsi1: '{{ template.storage }}:cloudinit'
    net:
      net0: 'virtio,bridge=vmbr0'
    template: true
    timeout: 1000

- name: Clone VMs from cloud-init template
  community.general.proxmox_kvm:
    node: "{{ pve.node }}"
    api_user: "{{ pve.api.user }}"
    api_password: "{{ pve.api.password }}"
    api_host: "{{ pve.api.host }}"
    clone: "{{ template.name }}"
    full: true
    onboot: true
    vmid: "{{ template.vmid }}"
    name: "{{ item.name }}"
    newid: "{{ item.vmid }}"
  loop: "{{ vms }}"

- name: Fetch VM configuration
  become: true
  ansible.builtin.shell:
    cmd: qm config {{ item.vmid }}
  register: vm_config
  loop: "{{ vms }}"

- name: Update VM params
  vars:
    split_name: "{{ item.item.name | split('-') }}"
    cicustom: "network=local:snippets/{{ item.item.vmid }}-network-ci.yaml,user=local:snippets/{{ template.vmid }}-user-ci.yaml,vendor=local:snippets/{{ item.item.vmid }}-vendor-ci.yaml"
  community.general.proxmox_kvm:
    node: "{{ pve.node }}"
    api_user: "{{ pve.api.user }}"
    api_password: "{{ pve.api.password }}"
    api_host: "{{ pve.api.host }}"
    vmid: "{{ item.item.vmid }}"
    tags:
      - ansible
      - k3s
      - "{{ split_name[1] }}"
    update: true
    cores: "{{ item.item.cpu.cores }}"
    memory: "{{ item.item.memory }}"
    sockets: "{{ item.item.cpu.sockets }}"
    cicustom: "{{ cicustom }}"
    citype: nocloud
  loop: "{{ vm_config.results }}"
  when: "cicustom not in item.stdout"

- name: Setup VM net
  become: true
  vars:
    net0: virtio={{ item.item.mac_addr }},bridge=vmbr0,tag={{ network.vlan_tag }}
  ansible.builtin.shell:
    cmd: qm set {{ item.item.vmid }} --net0 {{ net0 }}
  loop: "{{ vm_config.results }}"
  when: "net0 not in item.stdout"

- name: Resize VM disk
  become: true
  ansible.builtin.shell:
    cmd: qm resize {{ item.item.vmid }} scsi0 {{ item.item.disk_size }}
  loop: "{{ vm_config.results }}"
  when: "item.item.disk_size not in item.stdout"

- name: Configure passthrough disks
  become: true
  ansible.builtin.shell:
    cmd: qm set {{ item.0.vmid }} -{{ item.1.id }} /dev/disk/by-id/{{ item.1.disk_id }}
  with_subelements:
    - "{{ vms }}"
    - passthrough_disks

- name: Configure gpu video passthrough
  become: true
  ansible.builtin.shell:
    cmd: qm set {{ item.item.vmid }} -hostpci0 {{ gpu_id }},pcie=1,rombar=1
  loop: "{{ vm_config.results }}"
  when: "item.item.passthrough_gpu"

- name: Start VM
  community.general.proxmox_kvm:
    node: "{{ pve.node }}"
    api_user: "{{ pve.api.user }}"
    api_password: "{{ pve.api.password }}"
    api_host: "{{ pve.api.host }}"
    vmid: "{{ item.vmid }}"
    state: started
    timeout: 1000
  loop: "{{ vms }}"
